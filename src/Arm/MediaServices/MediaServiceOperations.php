<?php

/**
 * Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 *
 * PHP version: 5.5
 *
 * @category    Microsoft
 *
 * @author      Azure PHP SDK <azurephpsdk@microsoft.com>
 * @copyright   2016 Microsoft Corporation
 * @license     https://github.com/yaqiyang/php-sdk-dev/blob/master/LICENSE
 *
 * @link        https://github.com/Azure/azure-sdk-for-php
 *
 * @version     Release: 0.10.0_2016, API Version: 2015-10-01
 */

namespace MicrosoftAzure\Arm\MediaServices;

use MicrosoftAzure\Common\Internal\Http\HttpClient as PhpHttpClient;
use MicrosoftAzure\Common\Internal\Resources as PhpResources;
use MicrosoftAzure\Common\Internal\Utilities as PhpUtilities;
use MicrosoftAzure\Common\Internal\Validate as PhpValidate;

/**
 * MediaServiceOperations for Media Services resource management APIs.
 */
class MediaServiceOperations
{
    /**
     * The service client object for the operations.
     *
     * @var MediaServicesManagementClient
     */
    private $_client;

    /**
     * Creates a new instance for MediaServiceOperations.
     *
     * @param MediaServicesManagementClient, Service client for MediaServiceOperations
     */
    public function __construct($client)
    {
        $this->_client = $client;
    }

    /**
     * Check whether the Media Service resource name is available. The name must
     * be globally unique.
     *
     * @param array $checkNameAvailabilityInput Properties needed to check the availability of a name. 
     * <pre>
     * [
     *    'name' => '',
     *    'type' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'nameAvailable' => 'false',
     *    'reason' => 'None|Invalid|AlreadyExists',
     *    'message' => ''
     * ];
     * </pre>
     */
    public function checkNameAvailabilty(array $checkNameAvailabilityInput, array $customHeaders = [])
    {
        $response = $this->checkNameAvailabiltyAsync($checkNameAvailabilityInput, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Check whether the Media Service resource name is available. The name must
     * be globally unique.
     *
     * @param array $checkNameAvailabilityInput Properties needed to check the availability of a name. 
     * <pre>
     * [
     *    'name' => '',
     *    'type' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function checkNameAvailabiltyAsync(array $checkNameAvailabilityInput, array $customHeaders = [])
    {
        if ($this->_client->getSubscriptionId() == null) {
            PhpValidate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            PhpValidate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($checkNameAvailabilityInput == null) {
            PhpValidate::notNullOrEmpty($checkNameAvailabilityInput, '$checkNameAvailabilityInput');
        }

        $path = '/subscriptions/{subscriptionId}/providers/Microsoft.Media/CheckNameAvailability';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[PhpResources::X_MS_REQUEST_ID] = PhpUtilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($checkNameAvailabilityInput);

        $response = PhpHttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * List all of the Media Services in a resource group.
     *
     * @param string $resourceGroupName Name of the resource group within the
     * Azure subscription.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => ''
     * ];
     * </pre>
     */
    public function listByResourceGroup($resourceGroupName, array $customHeaders = [])
    {
        $response = $this->listByResourceGroupAsync($resourceGroupName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * List all of the Media Services in a resource group.
     *
     * @param string $resourceGroupName Name of the resource group within the
     * Azure subscription.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listByResourceGroupAsync($resourceGroupName, array $customHeaders = [])
    {
        if ($this->_client->getSubscriptionId() == null) {
            PhpValidate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            PhpValidate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($resourceGroupName == null) {
            PhpValidate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{subscriptionId}' => $this->_client->getSubscriptionId(), '{resourceGroupName}' => $resourceGroupName]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[PhpResources::X_MS_REQUEST_ID] = PhpUtilities::getGuid();
        }

        $body = '';

        $response = PhpHttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Get a Media Service.
     *
     * @param string $resourceGroupName Name of the resource group within the
     * Azure subscription.
     * @param string $mediaServiceName Name of the Media Service.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'apiEndpoints' => '',
     *       'storageAccounts' => ''
     *    ]
     * ];
     * </pre>
     */
    public function get($resourceGroupName, $mediaServiceName, array $customHeaders = [])
    {
        $response = $this->getAsync($resourceGroupName, $mediaServiceName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Get a Media Service.
     *
     * @param string $resourceGroupName Name of the resource group within the
     * Azure subscription.
     * @param string $mediaServiceName Name of the Media Service.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getAsync($resourceGroupName, $mediaServiceName, array $customHeaders = [])
    {
        if ($this->_client->getSubscriptionId() == null) {
            PhpValidate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            PhpValidate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($resourceGroupName == null) {
            PhpValidate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($mediaServiceName == null) {
            PhpValidate::notNullOrEmpty($mediaServiceName, '$mediaServiceName');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{subscriptionId}' => $this->_client->getSubscriptionId(), '{resourceGroupName}' => $resourceGroupName, '{mediaServiceName}' => $mediaServiceName]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[PhpResources::X_MS_REQUEST_ID] = PhpUtilities::getGuid();
        }

        $body = '';

        $response = PhpHttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Create a Media Service.
     *
     * @param string $resourceGroupName Name of the resource group within the
     * Azure subscription.
     * @param string $mediaServiceName Name of the Media Service.
     * @param array $mediaService Media Service properties needed for creation. 
     * <pre>
     * [
     *    'properties' => [
     *       'apiEndpoints' => '',
     *       'storageAccounts' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'apiEndpoints' => '',
     *       'storageAccounts' => ''
     *    ]
     * ];
     * </pre>
     * When the resposne status is Created(201), 
     * <pre>
     * [
     *    'properties' => [
     *       'apiEndpoints' => '',
     *       'storageAccounts' => ''
     *    ]
     * ];
     * </pre>
     */
    public function create($resourceGroupName, $mediaServiceName, array $mediaService, array $customHeaders = [])
    {
        $response = $this->createAsync($resourceGroupName, $mediaServiceName, $mediaService, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Create a Media Service.
     *
     * @param string $resourceGroupName Name of the resource group within the
     * Azure subscription.
     * @param string $mediaServiceName Name of the Media Service.
     * @param array $mediaService Media Service properties needed for creation. 
     * <pre>
     * [
     *    'properties' => [
     *       'apiEndpoints' => '',
     *       'storageAccounts' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function createAsync($resourceGroupName, $mediaServiceName, array $mediaService, array $customHeaders = [])
    {
        if ($this->_client->getSubscriptionId() == null) {
            PhpValidate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            PhpValidate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($resourceGroupName == null) {
            PhpValidate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($mediaServiceName == null) {
            PhpValidate::notNullOrEmpty($mediaServiceName, '$mediaServiceName');
        }
        if ($mediaService == null) {
            PhpValidate::notNullOrEmpty($mediaService, '$mediaService');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}';
        $statusCodes = [200, 201];
        $method = 'PUT';

        $path = strtr($path, ['{subscriptionId}' => $this->_client->getSubscriptionId(), '{resourceGroupName}' => $resourceGroupName, '{mediaServiceName}' => $mediaServiceName]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[PhpResources::X_MS_REQUEST_ID] = PhpUtilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($mediaService);

        $response = PhpHttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Delete a Media Service.
     *
     * @param string $resourceGroupName Name of the resource group within the
     * Azure subscription.
     * @param string $mediaServiceName Name of the Media Service.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status OK(200).<br>
     */
    public function delete($resourceGroupName, $mediaServiceName, array $customHeaders = [])
    {
        $response = $this->deleteAsync($resourceGroupName, $mediaServiceName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Delete a Media Service.
     *
     * @param string $resourceGroupName Name of the resource group within the
     * Azure subscription.
     * @param string $mediaServiceName Name of the Media Service.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function deleteAsync($resourceGroupName, $mediaServiceName, array $customHeaders = [])
    {
        if ($this->_client->getSubscriptionId() == null) {
            PhpValidate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            PhpValidate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($resourceGroupName == null) {
            PhpValidate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($mediaServiceName == null) {
            PhpValidate::notNullOrEmpty($mediaServiceName, '$mediaServiceName');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}';
        $statusCodes = [200];
        $method = 'DELETE';

        $path = strtr($path, ['{subscriptionId}' => $this->_client->getSubscriptionId(), '{resourceGroupName}' => $resourceGroupName, '{mediaServiceName}' => $mediaServiceName]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[PhpResources::X_MS_REQUEST_ID] = PhpUtilities::getGuid();
        }

        $body = '';

        $response = PhpHttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Update a Media Service.
     *
     * @param string $resourceGroupName Name of the resource group within the
     * Azure subscription.
     * @param string $mediaServiceName Name of the Media Service.
     * @param array $mediaService Media Service properties needed for update. 
     * <pre>
     * [
     *    'properties' => [
     *       'apiEndpoints' => '',
     *       'storageAccounts' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'apiEndpoints' => '',
     *       'storageAccounts' => ''
     *    ]
     * ];
     * </pre>
     */
    public function update($resourceGroupName, $mediaServiceName, array $mediaService, array $customHeaders = [])
    {
        $response = $this->updateAsync($resourceGroupName, $mediaServiceName, $mediaService, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Update a Media Service.
     *
     * @param string $resourceGroupName Name of the resource group within the
     * Azure subscription.
     * @param string $mediaServiceName Name of the Media Service.
     * @param array $mediaService Media Service properties needed for update. 
     * <pre>
     * [
     *    'properties' => [
     *       'apiEndpoints' => '',
     *       'storageAccounts' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function updateAsync($resourceGroupName, $mediaServiceName, array $mediaService, array $customHeaders = [])
    {
        if ($this->_client->getSubscriptionId() == null) {
            PhpValidate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            PhpValidate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($resourceGroupName == null) {
            PhpValidate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($mediaServiceName == null) {
            PhpValidate::notNullOrEmpty($mediaServiceName, '$mediaServiceName');
        }
        if ($mediaService == null) {
            PhpValidate::notNullOrEmpty($mediaService, '$mediaService');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}';
        $statusCodes = [200];
        $method = 'PATCH';

        $path = strtr($path, ['{subscriptionId}' => $this->_client->getSubscriptionId(), '{resourceGroupName}' => $resourceGroupName, '{mediaServiceName}' => $mediaServiceName]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[PhpResources::X_MS_REQUEST_ID] = PhpUtilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($mediaService);

        $response = PhpHttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Regenerate the key for a Media Service.
     *
     * @param string $resourceGroupName Name of the resource group within the
     * Azure subscription.
     * @param string $mediaServiceName Name of the Media Service.
     * @param array $regenerateKeyInput Properties needed to regenerate the Media Service key. 
     * <pre>
     * [
     *    'keyType' => 'Primary|Secondary'
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'key' => ''
     * ];
     * </pre>
     * Empty array with resposne status Accepted(202).<br>
     */
    public function regenerateKey($resourceGroupName, $mediaServiceName, array $regenerateKeyInput, array $customHeaders = [])
    {
        $response = $this->regenerateKeyAsync($resourceGroupName, $mediaServiceName, $regenerateKeyInput, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Regenerate the key for a Media Service.
     *
     * @param string $resourceGroupName Name of the resource group within the
     * Azure subscription.
     * @param string $mediaServiceName Name of the Media Service.
     * @param array $regenerateKeyInput Properties needed to regenerate the Media Service key. 
     * <pre>
     * [
     *    'keyType' => 'Primary|Secondary'
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function regenerateKeyAsync($resourceGroupName, $mediaServiceName, array $regenerateKeyInput, array $customHeaders = [])
    {
        if ($this->_client->getSubscriptionId() == null) {
            PhpValidate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            PhpValidate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($resourceGroupName == null) {
            PhpValidate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($mediaServiceName == null) {
            PhpValidate::notNullOrEmpty($mediaServiceName, '$mediaServiceName');
        }
        if ($regenerateKeyInput == null) {
            PhpValidate::notNullOrEmpty($regenerateKeyInput, '$regenerateKeyInput');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/regenerateKey';
        $statusCodes = [200, 202];
        $method = 'POST';

        $path = strtr($path, ['{subscriptionId}' => $this->_client->getSubscriptionId(), '{resourceGroupName}' => $resourceGroupName, '{mediaServiceName}' => $mediaServiceName]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[PhpResources::X_MS_REQUEST_ID] = PhpUtilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($regenerateKeyInput);

        $response = PhpHttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * List the keys for a Media Service.
     *
     * @param string $resourceGroupName Name of the resource group within the
     * Azure subscription.
     * @param string $mediaServiceName Name of the Media Service.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'primaryAuthEndpoint' => '',
     *    'secondaryAuthEndpoint' => '',
     *    'primaryKey' => '',
     *    'secondaryKey' => '',
     *    'scope' => ''
     * ];
     * </pre>
     * Empty array with resposne status Accepted(202).<br>
     */
    public function listKeys($resourceGroupName, $mediaServiceName, array $customHeaders = [])
    {
        $response = $this->listKeysAsync($resourceGroupName, $mediaServiceName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * List the keys for a Media Service.
     *
     * @param string $resourceGroupName Name of the resource group within the
     * Azure subscription.
     * @param string $mediaServiceName Name of the Media Service.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listKeysAsync($resourceGroupName, $mediaServiceName, array $customHeaders = [])
    {
        if ($this->_client->getSubscriptionId() == null) {
            PhpValidate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            PhpValidate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($resourceGroupName == null) {
            PhpValidate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($mediaServiceName == null) {
            PhpValidate::notNullOrEmpty($mediaServiceName, '$mediaServiceName');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/listKeys';
        $statusCodes = [200, 202];
        $method = 'POST';

        $path = strtr($path, ['{subscriptionId}' => $this->_client->getSubscriptionId(), '{resourceGroupName}' => $resourceGroupName, '{mediaServiceName}' => $mediaServiceName]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[PhpResources::X_MS_REQUEST_ID] = PhpUtilities::getGuid();
        }

        $body = '';

        $response = PhpHttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Synchronize the keys for a storage account to the Media Service.
     *
     * @param string $resourceGroupName Name of the resource group within the
     * Azure subscription.
     * @param string $mediaServiceName Name of the Media Service.
     * @param array $syncStorageKeysInput Properties needed to sycnronize the keys for a storage
     *  account to the Media Service. 
     * <pre>
     * [
     *    'id' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'apiEndpoints' => '',
     *       'storageAccounts' => ''
     *    ]
     * ];
     * </pre>
     * Empty array with resposne status Accepted(202).<br>
     */
    public function syncStorageKeys($resourceGroupName, $mediaServiceName, array $syncStorageKeysInput, array $customHeaders = [])
    {
        $response = $this->syncStorageKeysAsync($resourceGroupName, $mediaServiceName, $syncStorageKeysInput, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Synchronize the keys for a storage account to the Media Service.
     *
     * @param string $resourceGroupName Name of the resource group within the
     * Azure subscription.
     * @param string $mediaServiceName Name of the Media Service.
     * @param array $syncStorageKeysInput Properties needed to sycnronize the keys for a storage
     *  account to the Media Service. 
     * <pre>
     * [
     *    'id' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function syncStorageKeysAsync($resourceGroupName, $mediaServiceName, array $syncStorageKeysInput, array $customHeaders = [])
    {
        if ($this->_client->getSubscriptionId() == null) {
            PhpValidate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            PhpValidate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($resourceGroupName == null) {
            PhpValidate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($mediaServiceName == null) {
            PhpValidate::notNullOrEmpty($mediaServiceName, '$mediaServiceName');
        }
        if ($syncStorageKeysInput == null) {
            PhpValidate::notNullOrEmpty($syncStorageKeysInput, '$syncStorageKeysInput');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/syncStorageKeys';
        $statusCodes = [200, 202];
        $method = 'POST';

        $path = strtr($path, ['{subscriptionId}' => $this->_client->getSubscriptionId(), '{resourceGroupName}' => $resourceGroupName, '{mediaServiceName}' => $mediaServiceName]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[PhpResources::X_MS_REQUEST_ID] = PhpUtilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($syncStorageKeysInput);

        $response = PhpHttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }
}
